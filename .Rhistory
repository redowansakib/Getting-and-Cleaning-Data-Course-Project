library(help = "datasets")
x <- c(1,2,3)
x <- c(a,b,c)
x <- c('a','b','c')
sessioninfo()
sessionInfo()
version
install.packages("ggplot2")
library(ggplot2)
browseVignettes(ggplot2)
browseVignettes("ggplot2")
help(devtools)
install.packages("KernSmooth")
library(KernSmooth)
install.packages("devtools")
ibrary(devtools)
library(devtools)
help("devtools")
x <- c('a','b','c')
attributes(x)
length(x)
class(x)
as.logical(x)
y <- matrix(1:8, nrow = 4, ncol = 2)
y
print(attributes(y))
print(attributes(x))
print(dim(y))
dim(y) <- c(2,4)
print(y)
rm(x)
x <- 4
class(x)
y <- 1:4
print(x+y)
rm(x,y)
outcome <- read.csv("outcome-of-care-measures.csv",colClasses = "character")
outcome <- read.csv("outcome-of-care-measures.csv",colClasses = "character")
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
1 * TRUE
1 * FALSE
library(swirl)
swirl()
mydf <- read.csv(path2csv, stringAsFactors=FALSE)
mydf <- read.csv(path2csv, stringsAsFactors=FALSE)
?read.csv
dim(mydf)
head(mydf)
library(deplyr)
library(dplyr)
packageVersion(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
library(tibble)
play()
?as_tibble
?as_tibble
nxt()
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
select(cran, -X:size)
select(cran, -5:20)
-5:20
select(cran, -(5:20))
-(5:20)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version == "3.0.2", country == "IN")
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(R.version))
filter(cran, !is.na(R_version))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, id_ip)
arrange(cran2, ip_id)
arrange(cran2, desc(id_ip))
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2m country, desc(r_version), ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package,size)
cran3
mutate(cran3, size_mb = size/2^20)
mutate(cran3, size_mb = size/2^20, size_gb = size_mb/2^10)
mutate(cran3, correct_size = size)
mutate(cran3, correct_size = size+1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
cran <- as_tibble(mydf)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
submit()
pack_sum
quantile(pack_sum$count,probs = 0.99)
filter(pack_sum, count > 679)
top_counts -> filter(pack_sum, count > 679)
top_counts -> filter(pack_sum, count > 679)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_stored <- arrange(top_counts, count)
top_counts_stored <- arrange(top_counts, desc(count))
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique>465)
View(top_unique)
arrange(top_unique, unique)
arrange(top_unique, desc(unique))
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students,sex,count,-grade)
students2
gather(students2, sex_class, count, grade)
gather(students2, sex_class, count, -grade)
res <- gather(students2, sex_class, count, -grade)
res
?seperate
?separate
separate(res,sex_class, c("sex", "class"))
?gather
submit()
students3
reset()
swirl()
reset()
swirl()
submit()
?spread
submit()
submit()
submit()
submit()
submit()
submit()
library(readr)
parse_number("class5")
submit()
?mutate
submit()
submit()
students4
students4
submit()
submit()
submit()
submit()
submit()
passed
failed
passed<-mutate(passed, status="passed")
failed<-mutate(passed, status="failed")
passed<-mutate(passed, status="passed")
passed<-mutate(failed, status="passed")
failed<-mutate(failed, status="failed")
bind_rows(passed, failed)
sat
?select
?separate
submit()
?group_by
submit()
rm(list=ls())
setwd(r"D:\Coursera Data Science Course\Getting and Cleaning Data\Assignment")
path -> "D:\Coursera Data Science Course\Getting and Cleaning Data\Assignment"
gsub("\\\\","/", "D:\Coursera Data Science Course\Getting and Cleaning Data\Assignment")
r"(D:\Coursera Data Science Course\Getting and Cleaning Data\Assignment)"
setwd(r"(D:\Coursera Data Science Course\Getting and Cleaning Data\Assignment)")
getwd()
?read.delim
read.delim(r"("UCI HAR Dataset\train\subject_train.txt")")
read.delim(r"(UCI HAR Dataset\train\subject_train.txt)")
subject_train <- read.delim(r"(UCI HAR Dataset\train\subject_train.txt)")
len(subject_train)
length(subject_train)
class(subject_train)
names(subject_train)
subject_train <- read.delim(r"(UCI HAR Dataset\train\subject_train.txt)", colnames = "subject")
subject_train <- read.delim(r"(UCI HAR Dataset\train\subject_train.txt)", col.names = "subject")
length(subject_tain[["subject"]])
subject_train <- read.delim(r"(UCI HAR Dataset\train\subject_train.txt)", col.names = "subject")
length(subject_train[["subject"]])
y_train <- read.delim(r"(UCI HAR Dataset\train\y_train.txt)", col.names = "y")
length(y_train[["y"]])
X_train <- read.delim(r"(UCI HAR Dataset\train\X_train.txt)")
X_train[1,]
?strsplit
sample <- X_train[[1,]]
X_train[[1,]]
X_train[1,]
class(X_train[1,])
sample <- X_train[1,]
strsplit("a b", " ")
strsplit(sample, " ")
strsplit(sample, "  ")
strsplit(sample, " ")
length(strsplit(sample, " "))
class(strsplit(sample, " "))
length(as.chracter(strsplit(sample, " ")))
length(as.character(strsplit(sample, " ")))
as.character(strsplit(sample, " "))
strsplit(sample, " ")
strsplit(sample, " ")[1]
class(strsplit(sample, " ")[1])
strsplit(sample, " ")[1]
strsplit(sample, " ")[[1]]
class(strsplit(sample, " ")[[1]])
length(strsplit(sample, " ")[[1]])
grep("^$", strsplit(sample, " ")[[1]])
sample(!grepl("^$", strsplit(sample, " ")[[1]]))
sample[!grepl("^$", strsplit(sample, " ")[[1]])]
sample <- strsplit(sample, " ")[[1]]
str(sample)
sample[!grepl("^$", sample)]
length(sample[!grepl("^$", sample)])
